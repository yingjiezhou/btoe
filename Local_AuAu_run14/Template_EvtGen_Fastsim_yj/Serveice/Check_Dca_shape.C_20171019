/*--------------------Xiaozhi------------------------------------ 

  This macors for the different D and B hadron decay electrons DCA combine

  ---------------------------------------------------------------
*/

#include<fstream>
#include <iostream>
#include "TLatex.h"
#include "TStyle.h"
#include "TH3F.h"
#include "TF1.h"
#include "TMath.h"
#include "TLegend.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TLine.h"
#include "TFile.h"
#include "TGraph.h"
#include "TCanvas.h"
#include "TRandom3.h"
#include "TNtuple.h"
#include "./Binning_MB.h"

using namespace std;


const int mh2Nhist=3;
//const int Npt=7;

TString Ymh2Titlename[mh2Nhist]={" 3Ddca (cm)"," dcaXY (cm)"," dcaZ (cm) "};

TString Ymh1Titlename[mh2Nhist]={" dca (cm)"," dcaXY (cm)"," dcaZ (cm) "};
//TString Ymh1Titlename[mh2Nhist]={" dca (cm)"," dcaXY (cm)"," dcaZ (cm) "};

char buf[1024];

TH2F *mh2Hist_DcaVsPt_D0[mh2Nhist];
TH2F *mh2Hist_DcaVsPt_B0[mh2Nhist];

TH2F *mh2Hist_DcaVsPt_D0bar[mh2Nhist];
TH2F *mh2Hist_DcaVsPt_B0bar[mh2Nhist];


TH2F *mh2Hist_DcaVsPt_Dplus[mh2Nhist];
TH2F *mh2Hist_DcaVsPt_Bplus[mh2Nhist];

TH2F *mh2Hist_DcaVsPt_Dminus[mh2Nhist];
TH2F *mh2Hist_DcaVsPt_Bminus[mh2Nhist];

TH2F *mh2Hist_DcaVsPt_Lc[mh2Nhist];

TH1F *mh1hist_Dca_D0[mh2Nhist][Npt];
TH1F *mh1hist_Dca_B0[mh2Nhist][Npt];



TH1F *mh1hist_Dca_D0bar[mh2Nhist][Npt];
TH1F *mh1hist_Dca_B0bar[mh2Nhist][Npt];

TH1F *mh1hist_Dca_Dplus[mh2Nhist][Npt];
TH1F *mh1hist_Dca_Bplus[mh2Nhist][Npt];

TH1F *mh1hist_Dca_Dminus[mh2Nhist][Npt];
TH1F *mh1hist_Dca_Bminus[mh2Nhist][Npt];

TH1F *mh1hist_Dca_Lc[mh2Nhist][Npt];


TH1F *mh1hist_Dca_D[mh2Nhist][Npt];
TH1F *mh1hist_Dca_B[mh2Nhist][Npt];


TH1F *mh1hist_Dca_D0_rebin[mh2Nhist][Npt];
TH1F *mh1hist_Dca_B0_rebin[mh2Nhist][Npt];

TH1F *mh1hist_Dca_D0bar_rebin[mh2Nhist][Npt];
TH1F *mh1hist_Dca_B0bar_rebin[mh2Nhist][Npt];

TH1F *mh1hist_Dca_Dplus_rebin[mh2Nhist][Npt];
TH1F *mh1hist_Dca_Bplus_rebin[mh2Nhist][Npt];

TH1F *mh1hist_Dca_Dminus_rebin[mh2Nhist][Npt];
TH1F *mh1hist_Dca_Bminus_rebin[mh2Nhist][Npt];

TH1F *mh1Charm_dca_rebin[mh2Nhist][Npt];
TH1F *mh1Bottom_dca_rebin[mh2Nhist][Npt];


TH1F *mh1hist_Dca_D_rebin[mh2Nhist][Npt];
TH1F *mh1hist_Dca_B_rebin[mh2Nhist][Npt];


TH1F *mh1Charm_dca[mh2Nhist][Npt];
TH1F *mh1Bottom_dca[mh2Nhist][Npt];


TString mh2DcaHistName_D0[mh2Nhist]={"mh2D0rDcaVspt0","mh2D0rDcaVspt1","mh2D0rDcaVspt2"};


TString mh2DcaHistName_B0[mh2Nhist]={"mh2B0rDcaVspt0","mh2B0rDcaVspt1","mh2B0rDcaVspt2"};

TString mh2DcaHistName_Dplus[mh2Nhist]={"mh2DplusrDcaVspt0","mh2DplusrDcaVspt1","mh2DplusrDcaVspt2"};
TString mh2DcaHistName_Lc[mh2Nhist]={"mh2LcrDcaVspt0","mh2LcrDcaVspt1","mh2LcrDcaVspt2"};

TString mh2DcaHistName_Bplus[mh2Nhist]={"mh2BplusrDcaVspt0","mh2BplusrDcaVspt1","mh2BplusrDcaVspt2"};

TString mh2DcaHistName_D0bar[mh2Nhist]={"mh2D0barrDcaVspt0","mh2D0barrDcaVspt1","mh2D0barrDcaVspt2"};
TString mh2DcaHistName_B0bar[mh2Nhist]={"mh2B0barrDcaVspt0","mh2B0barrDcaVspt1","mh2B0barrDcaVspt2"};

TString mh2DcaHistName_Dminus[mh2Nhist]={"mh2DminusrDcaVspt0","mh2DminusrDcaVspt1","mh2DminusrDcaVspt2"};
TString mh2DcaHistName_Bminus[mh2Nhist]={"mh2BminusrDcaVspt0","mh2BminusrDcaVspt1","mh2BminusrDcaVspt2"};


// const int  nDcasDca = 54;
// Double_t const  DcaEdgeDca[nDcasDca+1] = {-0.1   , -0.09 ,     -0.08  ,   -0.07    , -0.06    , -0.05 , -0.0475 , -0.045 , -0.0425 , -0.04 , -0.0375 , -0.035 , -0.0325 , -0.03 , -0.0275 , -0.025 , -0.0225 , -0.02,-0.018,-0.016,-0.014,-0.012,-0.01,-0.008,-0.006,-0.004,-0.002,0,0.002,0.004,0.006,0.008,0.01,0.012,0.014,0.016,0.018,0.02 ,0.0225 , 0.025 , 0.0275 , 0.03 , 0.0325 , 0.035 , 0.0375 , 0.04 , 0.0425 , 0.045 , 0.0475 , 0.05    , 0.06  ,  0.07    , 0.08    , 0.09   ,0.1};

TLatex* drawLatex(Double_t, Double_t, char* , Int_t , Double_t , Int_t);
int Check_Dca_shape(){


  TH1::SetDefaultSumw2();
  TH2::SetDefaultSumw2();
  TH3::SetDefaultSumw2();
   
  gStyle->SetOptStat(00000);
  gStyle->SetTitleSize(0.05,"XY");
  gStyle->SetTitleFontSize(0.06);
  gStyle->SetTitleOffset(1.3,"X");
  gStyle->SetTitleOffset(1,"Y");
  gStyle->SetPadTopMargin(0.13);
  gStyle->SetPadRightMargin(0.02);
  gStyle->SetPadBottomMargin(0.13);
  gStyle->SetPadLeftMargin(0.13);
  // gStyle->SetLineWidth(1);
 

  // TFile * inFile_D0= new TFile("input/D0.root","READ");
  // TFile * inFile_D0bar= new TFile("input/D0bar.root","READ");
  
  // TFile * inFile_Dplus= new TFile("input/Dplus.root","READ");
  // TFile * inFile_Dminus= new TFile("input/Dminus.root","READ");


  //--------------

  // TFile * inFile_D0= new TFile("../input_new_20171009/TypeID_Ana_421.root","READ");
  // TFile * inFile_Dplus= new TFile("../input_new_20171009/TypeID_Ana_411.root","READ");
  // TFile * inFile_Lc= new TFile("../input_new_20171009/TypeID_Ana_4122.root","READ");
  // TFile * inFile_Bplus= new TFile("../input_new_20171009/TypeID_Ana_521.root","READ");
  // TFile * inFile_B0= new TFile("../input_new_20171009/TypeID_Ana_511.root","READ");

  TFile * inFile_D0= new TFile("./input/TypeID_Ana_421.root","READ");
  TFile * inFile_Dplus= new TFile("./input/TypeID_Ana_411.root","READ");
  TFile * inFile_Lc= new TFile("./input/TypeID_Ana_4122.root","READ");
  TFile * inFile_Bplus= new TFile("./input/TypeID_Ana_521.root","READ");
  TFile * inFile_B0= new TFile("./input/TypeID_Ana_511.root","READ");



  for(Int_t ihist=0;ihist<mh2Nhist;ihist++)
    {
      mh2Hist_DcaVsPt_D0[ihist]=(TH2F *) inFile_D0->Get(mh2DcaHistName_D0[ihist]);
      mh2Hist_DcaVsPt_Dplus[ihist]=(TH2F *) inFile_Dplus->Get(mh2DcaHistName_Dplus[ihist]);
      mh2Hist_DcaVsPt_Lc[ihist]=(TH2F *) inFile_Lc->Get(mh2DcaHistName_Lc[ihist]);
      
      mh2Hist_DcaVsPt_Bplus[ihist]=(TH2F *) inFile_Bplus->Get(mh2DcaHistName_Bplus[ihist]);
      mh2Hist_DcaVsPt_B0[ihist]=(TH2F *) inFile_B0->Get(mh2DcaHistName_B0[ihist]);


      
      mh2Hist_DcaVsPt_D0[ihist]->SetTitle("D^{0} #rightarrow e");
      mh2Hist_DcaVsPt_B0[ihist]->SetTitle("B^{0} #rightarrow e");

      
      mh2Hist_DcaVsPt_D0[ihist]->GetXaxis()->SetTitle("p_{T} (GeV/c)");
      mh2Hist_DcaVsPt_D0[ihist]->GetYaxis()->SetTitle(Ymh2Titlename[ihist]);
      
      mh2Hist_DcaVsPt_B0[ihist]->GetXaxis()->SetTitle("p_{T} (GeV/c)");
      mh2Hist_DcaVsPt_B0[ihist]->GetYaxis()->SetTitle(Ymh2Titlename[ihist]);


      mh2Hist_DcaVsPt_D0[ihist]->GetXaxis()->CenterTitle(true);
      mh2Hist_DcaVsPt_D0[ihist]->GetYaxis()->CenterTitle(true);


      mh2Hist_DcaVsPt_B0[ihist]->GetXaxis()->CenterTitle(true);
      mh2Hist_DcaVsPt_B0[ihist]->GetYaxis()->CenterTitle(true);

      cout<< " ihist "<< ihist<<endl;

      for(Int_t ipt=0;ipt<Npt;ipt++)
      	{

      	  sprintf(buf,"mh1rDca_hist%ipt%i_D0",ihist,ipt);
      	  mh1hist_Dca_D0[ihist][ipt]= (TH1F *) mh2Hist_DcaVsPt_D0[ihist]->ProjectionY(buf,Xbin_ptlow[ipt],Xbin_pthigh[ipt]);
	  ;
	  
      	  sprintf(buf,"mh1rDca_hist%ipt%iB0",ihist,ipt);
      	  mh1hist_Dca_B0[ihist][ipt]= (TH1F *) mh2Hist_DcaVsPt_B0[ihist]->ProjectionY(buf,Xbin_ptlow[ipt],Xbin_pthigh[ipt]);
	  ;
	  
      	  sprintf(buf,"mh1rDca_hist%ipt%iDplus",ihist,ipt);
      	  mh1hist_Dca_Dplus[ihist][ipt]= (TH1F *) mh2Hist_DcaVsPt_Dplus[ihist]->ProjectionY(buf,Xbin_ptlow[ipt],Xbin_pthigh[ipt]);

      	  sprintf(buf,"mh1rDca_hist%ipt%iLc",ihist,ipt);
      	  mh1hist_Dca_Lc[ihist][ipt]= (TH1F *) mh2Hist_DcaVsPt_Lc[ihist]->ProjectionY(buf,Xbin_ptlow[ipt],Xbin_pthigh[ipt]);

	  
      	  sprintf(buf,"mh1rDca_hist%ipt%iBplus",ihist,ipt);
      	  mh1hist_Dca_Bplus[ihist][ipt]= (TH1F *) mh2Hist_DcaVsPt_Bplus[ihist]->ProjectionY(buf,Xbin_ptlow[ipt],Xbin_pthigh[ipt]);

	  	  
	}
    }


  // mh1hist_Dca_Dplus[1][0]->SetLineColor(2);
  mh1hist_Dca_Dplus[2][0]->SetLineColor(2);
 
  TLegend *legend_D  = new TLegend(0.15,0.65,0.4,0.85);
  legend_D ->AddEntry(mh1hist_Dca_Dplus[1][0],"DCA_XY","l");
  legend_D ->AddEntry(mh1hist_Dca_Dplus[2][0],"DCA_Z","l");
 
  legend_D ->SetBorderSize(0);
  legend_D ->SetTextSize(0.05);
  legend_D ->SetFillStyle(0);
  legend_D ->SetTextFont(62);



 
  TCanvas *c_D0=new TCanvas("c_D0","",1200,800);
  TCanvas *c_D=new TCanvas("c_D","",1200,800);
  TCanvas *c_Lc=new TCanvas("c_Lc","",1200,800);
  TCanvas *c_B=new TCanvas("c_B","",1200,800);
  
  c_D0->Divide(2,2);
  c_Lc->Divide(2,2);
  c_D->Divide(2,2);
  c_B->Divide(2,2);

  const Int_t IHIST=1;
  for(Int_t ipt=0;ipt<Npt;ipt++)
    {
      //D0
      c_D0->cd(ipt+1);
      gPad->SetLogy();
      mh1hist_Dca_D0[IHIST+1][ipt]->SetLineColor(2);
      mh1hist_Dca_D0[IHIST+1][ipt]->SetMarkerColor(2);

      mh1hist_Dca_D0[IHIST][ipt]->SetTitle(mh1Title[ipt]);
      mh1hist_Dca_D0[IHIST][ipt]->Draw("");
      mh1hist_Dca_D0[IHIST+1][ipt]->Draw("same");
      legend_D->Draw();

      c_D->cd(ipt+1);
      gPad->SetLogy();
      mh1hist_Dca_Dplus[IHIST+1][ipt]->SetLineColor(2);
      mh1hist_Dca_Dplus[IHIST+1][ipt]->SetMarkerColor(2);
      mh1hist_Dca_Dplus[IHIST][ipt]->SetTitle(mh1Title[ipt]);
      mh1hist_Dca_Dplus[IHIST][ipt]->Draw("");
      mh1hist_Dca_Dplus[IHIST+1][ipt]->Draw("same");
      legend_D->Draw();


      c_Lc->cd(ipt+1);
      gPad->SetLogy();
      mh1hist_Dca_Lc[IHIST+1][ipt]->SetLineColor(2);
      mh1hist_Dca_Lc[IHIST+1][ipt]->SetMarkerColor(2);
      mh1hist_Dca_Lc[IHIST][ipt]->SetTitle(mh1Title[ipt]);
      mh1hist_Dca_Lc[IHIST][ipt]->Draw("");
      mh1hist_Dca_Lc[IHIST+1][ipt]->Draw("same");
      legend_D->Draw();

      c_B->cd(ipt+1);
      gPad->SetLogy();
      mh1hist_Dca_Bplus[IHIST+1][ipt]->SetLineColor(2);
      mh1hist_Dca_Bplus[IHIST+1][ipt]->SetMarkerColor(2);
      mh1hist_Dca_Bplus[IHIST][ipt]->SetTitle(mh1Title[ipt]);
      mh1hist_Dca_Bplus[IHIST][ipt]->Draw("");
      mh1hist_Dca_Bplus[IHIST+1][ipt]->Draw("same");
      legend_D->Draw();


      //0verlawer D0


	  
	  
    }

  // D0

  c_D0->SaveAs("Plots/cR_D0.pdf");
  c_D->SaveAs("Plots/cR_Dplus.pdf");
  c_Lc->SaveAs("Plots/cR_Lc.pdf");
  c_B->SaveAs("Plots/cR_B.pdf");

   
  TLegend *legend_D0  = new TLegend(0.15,0.65,0.4,0.85);
  legend_D0 ->AddEntry(mh1hist_Dca_D0[IHIST+1][0],mh1Title[0],"l");
  legend_D0 ->AddEntry(mh1hist_Dca_D0[IHIST+1][1],mh1Title[1],"l");
  legend_D0 ->AddEntry(mh1hist_Dca_D0[IHIST+1][2],mh1Title[2],"l");
  legend_D0 ->AddEntry(mh1hist_Dca_D0[IHIST+1][3],mh1Title[3],"l");

 
  legend_D0 ->SetBorderSize(0);
  legend_D0 ->SetTextSize(0.05);
  legend_D0 ->SetFillStyle(0);
  legend_D0 ->SetTextFont(132);

  TCanvas *c_D0_xy=new TCanvas("c_D0_xy","",1200,800);
  TCanvas *c_D0_z=new TCanvas("c_D0_z","",1200,800);

  TCanvas *c_B0_xy=new TCanvas("c_B0_xy","",1200,800);
  TCanvas *c_B0_z=new TCanvas("c_B0_z","",1200,800);

  
  for(Int_t ipt=0;ipt<Npt;ipt++)
    {

      mh1hist_Dca_D0[IHIST+1][ipt]->Rebin(2);
      mh1hist_Dca_D0[IHIST+1][ipt]->Scale(1./mh1hist_Dca_D0[IHIST+1][ipt]->Integral());
      c_D0_xy->cd();
      gPad->SetLogy();

      mh1hist_Dca_D0[IHIST+1][ipt]->SetLineColor(ipt+1);
      mh1hist_Dca_D0[IHIST+1][ipt]->SetMarkerColor(ipt+1);

      if(ipt==0)
	{
	  mh1hist_Dca_D0[IHIST+1][Npt-1]->SetTitle("D^{0}->e DCA_{Z} pT dependent check");
	  mh1hist_Dca_D0[IHIST+1][Npt-1]->Draw();
	}
	mh1hist_Dca_D0[IHIST+1][ipt]->Draw("same");
	if(ipt==Npt-1)
	legend_D0->Draw();
      // DCA XY
      mh1hist_Dca_D0[IHIST][ipt]->Rebin(2);
      mh1hist_Dca_D0[IHIST][ipt]->Scale(1./mh1hist_Dca_D0[IHIST][ipt]->Integral());
      c_D0_z->cd();
      gPad->SetLogy();

      mh1hist_Dca_D0[IHIST][ipt]->SetLineColor(ipt+1);
      mh1hist_Dca_D0[IHIST][ipt]->SetMarkerColor(ipt+1);

      if(ipt==0){
	mh1hist_Dca_D0[IHIST][Npt-1]->SetTitle("D^{0}->e DCA_{XY} pT dependent check");
	mh1hist_Dca_D0[IHIST][Npt-1]->Draw();
      }
      mh1hist_Dca_D0[IHIST][ipt]->Draw("same");
      if(ipt==Npt-1)
  legend_D0->Draw();


      //     for B

      mh1hist_Dca_B0[IHIST+1][ipt]->Rebin(2);
      mh1hist_Dca_B0[IHIST+1][ipt]->Scale(1./mh1hist_Dca_B0[IHIST+1][ipt]->Integral());
      c_B0_z->cd();
      gPad->SetLogy();

      mh1hist_Dca_B0[IHIST+1][ipt]->SetLineColor(ipt+1);
      mh1hist_Dca_B0[IHIST+1][ipt]->SetMarkerColor(ipt+1);

      if(ipt==0)
	{
	  mh1hist_Dca_B0[IHIST+1][Npt-1]->SetTitle("B^{0}->e DCA_{Z} pT dependent check");
	  mh1hist_Dca_B0[IHIST+1][Npt-1]->Draw();
	}
	mh1hist_Dca_B0[IHIST+1][ipt]->Draw("same");
	if(ipt==Npt-1)
	legend_D0->Draw();
      // DCA XY
      mh1hist_Dca_B0[IHIST][ipt]->Rebin(2);
      mh1hist_Dca_B0[IHIST][ipt]->Scale(1./mh1hist_Dca_B0[IHIST][ipt]->Integral());
      c_B0_xy->cd();
      gPad->SetLogy();

      mh1hist_Dca_B0[IHIST][ipt]->SetLineColor(ipt+1);
      mh1hist_Dca_B0[IHIST][ipt]->SetMarkerColor(ipt+1);

      if(ipt==0){
	mh1hist_Dca_B0[IHIST][Npt-1]->SetTitle("B^{0}->e DCA_{XY} pT dependent check");
	mh1hist_Dca_B0[IHIST][Npt-1]->Draw();
      }
      mh1hist_Dca_B0[IHIST][ipt]->Draw("same");
      if(ipt==Npt-1)
  legend_D0->Draw();



      
    }


  c_D0_xy->SaveAs("Plots/D0_DCA_XY.pdf");
  c_D0_z->SaveAs("Plots/D0_DCA_Z.pdf");
  
  c_B0_xy->SaveAs("Plots/B0_DCA_XY.pdf");
  c_B0_z->SaveAs("Plots/B0_DCA_Z.pdf");

 return 0;


}
// // TH1F * pi_dcaXY=new TH1F("pi_dcaXY","",Npt,ptbin);
// // TH1F * pi_dcaZ=new TH1F("pi_dcaZ","",Npt,ptbin);

// // TH1F * ele_dcaXY=new TH1F("ele_dcaXY","",Npt,ptbin);
// // TH1F * ele_dcaZ=new TH1F("ele_dcaZ","",Npt,ptbin);

// // TH1F * gross_pi_dcaXY=new TH1F("gross_pi_dcaXY","",Npt,ptbin);
// // TH1F * gross_pi_dcaZ=new TH1F("gross_pi_dcaZ","",Npt,ptbin);

// // TH1F * gross_ele_dcaXY=new TH1F("gross_ele_dcaXY","",Npt,ptbin);
// // TH1F * gross_ele_dcaZ=new TH1F("gross_ele_dcaZ","",Npt,ptbin);



// //   for(int ihist=0;ihist<mh2Nhist;ihist++){

// // TCanvas *c2=new TCanvas("c2","",1200,600);
// // c2->Divide(2,1);

// // TCanvas *c3=new TCanvas("c3","tet",800,600);
// // c3->Divide(2,2);

// // TCanvas *c4=new TCanvas("c4","",800,600);
// // c4->Divide(2,2);

// // TCanvas *c5=new TCanvas("c5","",800,600);
// // c5->Divide(2,2);


// // Double_t electr_reselutionXY[Npt];
// // Double_t pi_reselutionXY[Npt];

// // Double_t electr_reselutionZ[Npt];
// // Double_t pi_reselutionZ[Npt];

   


    
// //   c2->cd(1);
// //   gPad->SetLogz();
// //   mh2Hist_DcaVsPt_pion[ihist]->Draw("colz");
// //   c2->cd(2);
// //   gPad->SetLogz();
// //   mh2Hist_DcaVsPt_electron[ihist]->Draw("colz");
// //   c2->SaveAs(mh2DcaHistName_pi[ihist]+TString("Dca.gif"));
     
// //   //  continue;
// //   int ipad=1;
// //   for(Int_t ipt=0;ipt<Npt;ipt++)
// //     {
// // 	if(ipt<4)
// // 	  {
// // 	    c3->cd(ipad);
// // 	    gPad->SetLogy();
// // 	  }
// // 	else if( ipt<8)
// // 	  {
// // 	    c4->cd(ipad);
// // 	    gPad->SetLogy();
// // 	  }
// // 	else	if(ipt<12)
// // 	  {
// // 	  c5->cd(ipad);
// // 	  gPad->SetLogy();
// // 	  }
// // 	ipad++;
// // 	if(ipad==5)
// // 	  ipad=1;
// // 	//mh1hist_Dca_pion_rebin[ihist][ipt]->Scale(mh1hist_Dca_pion_rebin[ihist][ipt]->Integral("width")/mh1hist_Dca_electron_rebin[ihist][ipt]->Integral("width"));	

	
	
// // 	TF1 *f0 =new TF1(mh1hist_Dca_pion_rebin[ihist][ipt]->GetName(),"[0]*TMath::Gaus(x,[1],[2],1)",-1,1);// fit the dca
// // 	TF1 *f1 =new TF1(mh1hist_Dca_electron_rebin[ihist][ipt]->GetName(),"[0]*TMath::Gaus(x,[1],[2],1)",-1,1);// fit the dca


// // 	// TF1 *f0 =new TF1(mh1hist_Dca_pion_rebin[ihist][ipt]->GetName(),"[0]*TMath::Gaus(x,[1],[2],1)+[3]*TMath::Gaus(x,[4],[5],1)",-1,1);// fit the dca
// // 	// TF1 *f1 =new TF1(mh1hist_Dca_electron_rebin[ihist][ipt]->GetName(),"[0]*TMath::Gaus(x,[1],[2],1)+[3]*TMath::Gaus(x,[4],[5],1)",-1,1);// fit the dca

// // 	// TF1 *g0 =new TF1("g0","[0]*TMath::Gaus(x,[1],[2],1)",-1,1);// fit the dca 
// // 	// TF1 *g1 =new TF1("g1","[0]*TMath::Gaus(x,[1],[2],1)",-1,1);// fit the dca 
       
// // 	f0->SetParameter(1,0);
// // 	f0->SetParameter(2,7e-4);
     
// // 	// f0->SetParameter(4,0);
// // 	// f0->SetParameter(5,5);
     
     

// // 	f1->SetParameter(1,0);
// // 	f1->SetParameter(2,7e-4);
     
// // 	f0->SetLineColor(3);
// // 	f1->SetLineColor(4);

// // 	// g0->SetLineColor(6);
// // 	// g1->SetLineColor(7);

// // 	// g0->SetLineStyle(7);
// // 	// g1->SetLineStyle(7);
     
// // 	TLegend *legend  = new TLegend(0.6,0.65,0.85,0.85);
// // 	legend ->AddEntry(mh1hist_Dca_pion_rebin[ihist][ipt],"#pi   ","lp");
// // 	legend ->AddEntry(f0," Fit #pi   ","lp");
// // 	legend ->AddEntry(mh1hist_Dca_electron_rebin[ihist][ipt],"e ","lp");
// // 	legend ->AddEntry(f1," Fit e   ","lp");
     

     
 
// // 	legend ->SetBorderSize(0);
// // 	legend ->SetTextSize(0.045);
// // 	legend ->SetFillStyle(0);
// // 	legend ->SetTextFont(62);
   
	

	 
// // 	//  c3->cd(1);
// // 	// gPad->SetLogy();

// // 	mh1hist_Dca_electron_rebin[ihist][ipt]->Draw();	
	
// // 	mh1hist_Dca_pion_rebin[ihist][ipt]->Draw("same");
// // 	legend->Draw();
	
// // 	if(ihist>0)
// // 	  {

// // 	    mh1hist_Dca_pion_rebin[ihist][ipt]->Fit(f0,"R0","",-0.08,0.08);
// // 	    mh1hist_Dca_pion_rebin[ihist][ipt]->Fit(f0,"R","",-0.08,0.08);
// // 	    sprintf(buf,"#sigma _{#pi} %4.5f +- %4.5f",f0->GetParameter(2),f0->GetParError(2));

// // 		int bin1=mh1hist_Dca_pion_rebin[ihist][ipt]->FindBin(f0->GetParameter(1)-3*f0->GetParameter(2));
// // 		int bin2=mh1hist_Dca_pion_rebin[ihist][ipt]->FindBin(f0->GetParameter(1)+3*f0->GetParameter(2));
// // 		int bin_total=mh1hist_Dca_pion_rebin[ihist][ipt]->GetNbinsX();
// // 		Double_t pass=	mh1hist_Dca_pion_rebin[ihist][ipt]->Integral(0,bin1)+mh1hist_Dca_pion_rebin[ihist][ipt]->Integral(bin2,bin_total);
// // 		Double_t total=	mh1hist_Dca_pion_rebin[ihist][ipt]->Integral();
	    
// // 	    if(ihist==1)
// // 	      {
// // 		Double_t err0=f0->GetParError(0);
// // 		Double_t err2=f0->GetParError(2);
// // 		Double_t delta_0=err0/f0->GetParameter(0);
// // 		Double_t delta_2=err2/f0->GetParameter(2);

// // 		Double_t err=fabs(f0->GetParameter(0)*f0->GetParameter(2))*sqrt(delta_0*delta_0+delta_2*delta_2);

// // 		pi_dcaXY->SetBinContent(ipt+1,f0->GetParameter(2));
// // 		pi_dcaXY->SetBinError(ipt+1,f0->GetParError(2));
	
// // 		// int bin1=mh1hist_Dca_pion_rebin[ihist][ipt]->FindBin(f0->GetParameter(1)-3*f0->GetParameter(2));
// // 		// int bin2=mh1hist_Dca_pion_rebin[ihist][ipt]->FindBin(f0->GetParameter(1)+3*f0->GetParameter(2));
// // 		// int bin_total=mh1hist_Dca_pion_rebin[ihist][ipt]->GetNbinsX();
// // 		// Double_t pass=	mh1hist_Dca_pion_rebin[ihist][ipt]->Integral(0,bin1)+mh1hist_Dca_pion_rebin[ihist][ipt]->Integral(bin2,bin_total);
// // 		// Double_t total=	mh1hist_Dca_pion_rebin[ihist][ipt]->Integral();
// // 		//cout<< pass/total<< " !!!!!!!!!!!!!!!!!!!!!! "<<endl;
// // 		gross_pi_dcaXY->SetBinContent(ipt+1,pass/total*100);

// // 		//	throw (-1);
// // 	      }

// // 	    if(ihist==2)
// // 	      {

// // 		Double_t err0=f0->GetParError(0);
// // 		Double_t err2=f0->GetParError(2);
// // 		Double_t delta_0=err0/f0->GetParameter(0);
// // 		Double_t delta_2=err2/f0->GetParameter(2);

// // 		Double_t err=fabs(f0->GetParameter(0)*f0->GetParameter(2))*sqrt(delta_0*delta_0+delta_2*delta_2);
		
// // 		pi_dcaZ->SetBinContent(ipt+1,f0->GetParameter(2));
// // 		pi_dcaZ->SetBinError(ipt+1,f0->GetParError(2));
	      

// // 		//cout<< pass/total<< " !!!!!!!!!!!!!!!!!!!!!! "<<endl;
// // 		gross_pi_dcaZ->SetBinContent(ipt+1,pass/total*100);

// // 	      }
	    

// // 	    drawLatex(0.15,0.8,buf,62,0.045,3);
// // 	    legend->Draw(); 
	    
// // 	    mh1hist_Dca_electron_rebin[ihist][ipt]->Fit(f1,"R0","",-0.08,0.08);
// // 	    mh1hist_Dca_electron_rebin[ihist][ipt]->Fit(f1,"R","",-0.08,0.08);


// // 	     bin1=mh1hist_Dca_electron_rebin[ihist][ipt]->FindBin(f1->GetParameter(1)-3*f1->GetParameter(2));
// // 	     bin2=mh1hist_Dca_electron_rebin[ihist][ipt]->FindBin(f1->GetParameter(1)+3*f1->GetParameter(2));
// // 	     bin_total=mh1hist_Dca_electron_rebin[ihist][ipt]->GetNbinsX();
// // 	     pass=	mh1hist_Dca_electron_rebin[ihist][ipt]->Integral(0,bin1)+mh1hist_Dca_electron_rebin[ihist][ipt]->Integral(bin2,bin_total);
// // 	     total=	mh1hist_Dca_electron_rebin[ihist][ipt]->Integral();

// // 	    if(ihist==1)
// // 	      {
// // 		Double_t err0=f1->GetParError(0);
// // 		Double_t err2=f1->GetParError(2);
// // 		Double_t delta_0=err0/f1->GetParameter(0);
// // 		Double_t delta_2=err2/f1->GetParameter(2);

// // 		Double_t err=fabs(f1->GetParameter(0)*f1->GetParameter(2))*sqrt(delta_0*delta_0+delta_2*delta_2);

// // 		  ele_dcaXY->SetBinContent(ipt+1,f1->GetParameter(2));
// // 		  ele_dcaXY->SetBinError(ipt+1,f1->GetParError(2));
// // 		  gross_ele_dcaXY->SetBinContent(ipt+1,pass/total*100);	

// // 	      }

// // 	    if(ihist==2)
// // 	      {
// // 		Double_t err0=f1->GetParError(0);
// // 		Double_t err2=f1->GetParError(2);
// // 		Double_t delta_0=err0/f1->GetParameter(0);
// // 		Double_t delta_2=err2/f1->GetParameter(2);

// // 		Double_t err=fabs(f1->GetParameter(0)*f1->GetParameter(2))*sqrt(delta_0*delta_0+delta_2*delta_2);

// // 		ele_dcaZ->SetBinContent(ipt+1,f1->GetParameter(2));
// // 		ele_dcaZ->SetBinError(ipt+1,f1->GetParError(2));
// // 		gross_ele_dcaZ->SetBinContent(ipt+1,pass/total*100);		      
// // 	      }
	    
// // 	    sprintf(buf,"#sigma _{e} %4.5f +- %4.5f",f1->GetParameter(2),f1->GetParError(2));
// // 	    drawLatex(0.15,0.75,buf,62,0.045,4);
// // 	    legend->Draw(); 
// // 	  }  
// //      }
// //   c3->SaveAs(mh2DcaHistName_pi[ihist]+TString("mh1Dca_c3.png"));
// //   c4->SaveAs(mh2DcaHistName_pi[ihist]+TString("mh1Dca_c4.png"));
// //   c5->SaveAs(mh2DcaHistName_pi[ihist]+TString("mh1Dca_c5.png"));
// //    }  
      
// //   pi_dcaXY->SetMarkerStyle(20);
// //   pi_dcaZ->SetMarkerStyle(24);
    
// //   pi_dcaXY->SetMarkerColor(3);
// //   pi_dcaZ->SetMarkerColor(3);
    
// //   ele_dcaXY->SetMarkerStyle(20);
// //   ele_dcaZ->SetMarkerStyle(24);

// //   ele_dcaXY->SetMarkerColor(4);
// //   ele_dcaZ->SetMarkerColor(4);

// //   TLegend *legend  = new TLegend(0.65,0.65,0.85,0.85);
// //   legend ->AddEntry(ele_dcaXY,"e dcaXY resolution   ","lp");
// //   legend ->AddEntry(pi_dcaXY,"#pi dcaXY resolution   ","lp");
// //   legend ->AddEntry(ele_dcaZ,"e dcaZ resolution    ","lp");
// //   legend ->AddEntry(pi_dcaZ,"#pi dcaZ resolution   ","lp");
    
 
// // 	legend ->SetBorderSize(0);
// // 	legend ->SetTextSize(0.035);
// // 	legend ->SetFillStyle(0);
// // 	legend ->SetTextFont(62);
   
    

// //   TCanvas *c7=new TCanvas("c7","",800,600);
// //   TH2F *hh=new TH2F("hh","",100,0,15,10,0.0002,0.01);
// //   hh->GetXaxis()->SetTitle(" p_{T} (GeV/c)");
// //     hh->GetYaxis()->SetTitle(" Resolution");

// //   hh->Draw();
// //   pi_dcaXY->Draw("sameLP");
// //   pi_dcaZ->Draw("sameLP");
// //   ele_dcaXY->Draw("sameLP");
// //   ele_dcaZ->Draw("sameLP");

// //   legend->Draw();    
// //   c7->SaveAs("pi_Re.pdf");
// //   TH1F *ratio_XY=(TH1F *) pi_dcaXY->Clone("ratio_XY");
// //   TH1F *ratio_Z=(TH1F *) pi_dcaZ->Clone("ratio_Z");
 
// //   ratio_XY->Sumw2();
// //   ratio_Z->Sumw2();

// //   ratio_XY->Divide(ele_dcaXY);
// //   ratio_Z->Divide(ele_dcaZ);



// //   //-------------------

// // TH1D *h_frame = new TH1D("h_frame","h_title",150,0,15);
// // h_frame->GetXaxis()->SetTitle("p_{T} [GeV/c]");
// // h_frame->GetYaxis()->SetTitle("Resolution");

// // TCanvas *c1 = new TCanvas("c1","c1",1050,750);
// // c1->Divide(2,1);
// // c1->cd(1)->SetPad(0.01,0.4,0.99,0.99);
// // c1->cd(1)->SetBottomMargin(0.0);
// // h_frame->GetYaxis()->SetRangeUser(0.0001,1.2*pi_dcaXY->GetMaximum());
// // //  h_frame->SetTitle("gaussians");
// // h_frame->DrawCopy();
// // pi_dcaXY->Draw("pe,same");
// // ele_dcaXY->Draw("pe,same");

// // pi_dcaZ->Draw("pe,same");
// // ele_dcaZ->Draw("pe,same");

// // legend->Draw();

// // c1->cd(2)->SetPad(0.01,0.01,0.99,0.4);
// // c1->cd(2)->SetTopMargin   (0.0);
// // c1->cd(2)->SetBottomMargin(0.1);
// // TLine *line1 = new TLine(0,1,15,1);
// // line1->SetLineStyle(2);
// // line1->SetLineColor(16);
// // h_frame->GetYaxis()->SetRangeUser(0.5,1.5);
// // h_frame->SetTitle("ratio");
// // h_frame->GetYaxis()->SetTitle(" #pi/e  ratio");
// // h_frame->DrawCopy();
// // ratio_XY->Draw("pe,same");
// // ratio_Z->Draw("pe,same");

// // line1->Draw("same");
// //   //------------------



// // c1->SaveAs("Ratio.pdf");




// //   TCanvas *c6=new TCanvas("c6","",800,600);
// //   gross_pi_dcaXY->SetMarkerStyle(20);
// //   gross_ele_dcaXY->SetMarkerStyle(20);
// //   gross_pi_dcaZ->SetMarkerStyle(24);
// //   gross_ele_dcaZ->SetMarkerStyle(24);

// //   gross_pi_dcaZ->SetMarkerColor(3);
// //   gross_ele_dcaZ->SetMarkerColor(4);

// //   gross_pi_dcaXY->SetMarkerColor(3);
// //   gross_ele_dcaXY->SetMarkerColor(4);

// //   TH2F * h2=new TH2F("h2","",150,0,15,100,0,60);

// //   h2->Draw();
// //   h2->GetXaxis()->SetTitle("p_{T} GeV/c");
// //   h2->GetYaxis()->SetTitle("Grass out of 3 #sigma %");

// //   gross_pi_dcaXY->Draw("sameP");
//   gross_pi_dcaZ->Draw("sameP");

//   gross_ele_dcaXY->Draw("sameP");
//   gross_ele_dcaZ->Draw("sameP");

//   legend->Draw();
//   c6->SaveAs("BK_gross.pdf");

//   return 0;
// }

TLatex* drawLatex(Double_t x, Double_t y, char* text, Int_t textFont, Double_t textSize, Int_t colorIndex)
{
    
  TLatex *latex = new TLatex(x,y,text);                                        
  latex->SetNDC();                                                             
  // latex->SetTextFont(textFont);                                                
  latex->SetTextSize(textSize);                                                
  latex->SetTextColor(colorIndex);                                             
  latex->Draw("same");                                                      
  return latex;                                                                
}
