************************************************************
Maintainer:   Grigory Nigmatkulov
Institution:  National Research Nuclear University MEPhI
Date:         June 8, 2018
E-mail:       nigmatkulov@gmail.com ; ganigmatkulov@mephi.ru

Contributors:
              X. Dong, M. Mustafa, D. Smirnov, J. Lauret,
	      Yu. Fisyak, G. Van Buren, M. Lisa, R. Ma,
	      P. Liu,  G. Nigmatkulov, and others
************************************************************

Brief description of how to compile and run the analysis
over picoDst on your laptop and RCF.

1. Compilation:
  a) System has to have ROOT preinstalled (should work with versions 5 and 6).
  b) There is a Makefile stored in the StPicoEvent directory.
     In order to compile the codes one needs to run: make
  c) Since it is the most commonly used, the g++ compiler is used
     for the compilation. However, one can also switch it
     to clang++ (has been tested)
  d) After the compilation is finished the shared library
     libStPicoDst.so will be created.
  e) If you have some errors during the compilation please
     contact the picoDst maintainer (and/or picoDst mailing list).

2. Processing picoDst:
  There are two ROOT macroses with example of how to make a simple 
  analysis on picoDst. They are stored in the StPicoEvent/macros
  directory and called: PicoDstAnalyzer.C and RunAnalyzer.C.

  Lets assume that one has and input file(s) InputFile
  with a name.picoDst.root or a list of picoDst files,
  called name.lis(t), and StPicoEvent compiled (i.e. there is libStPicoDst.so).
  There are 2 possible processing scenarios depending
  on the ROOT version:

  a) ROOT 5:
     One should run ROOT from the terminal:
     [mytem]> root RunAnalyzer.C\(\"InputFile\"\)
     
     Or run this macros from the ineractive session:
     [mytem]> root
     root [0].x RunAnalyzer.C("InputFile")

     Any of aforementioned ways load libStPicoDst.so, compile and
     run RunAnalyzer.C. After the processing the remove dictionary
     and library created by ACLiC.

  b) ROOT 6:
     Since ROOT 6 does not have CINT there is some extra flexibility
     on how to analyze the data. The first one is listed above, i.e. a).
     The second option is to run the PicoDstAnalyzer.C macro directly.
     
     Either from the terminal:
     root PicoDstAnalyzer.C\(\"InputFile"\)

     Or from the root session:
     [mytem]> root
     root [0].x PicoDstAnalyzer.C("InputFile")

For any questions or with any suggestions please contact the package
maintainer and also discuss it in the STAR picoDst mailing list:
picodst-hn@sun.star.bnl.gov

