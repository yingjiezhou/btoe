void ElectronV2(int save=1){
/////////////////////////////////////////////////////////////////////////////////////////
    gROOT->ProcessLine(".x ~/myStyle.C");  
    TGaxis::SetMaxDigits(3); 
    gStyle->SetPalette(56);
//////////////////////////////////////////////////////////////////
    TFile *f_D = new TFile("../production/NPE_Tuples_V1_1.root");  
    ch2 = (TChain*) f_D->Get("Signal");
    /*TChain *ch2 = new TChain("Signal"); 
    for(int i=0;i<3000;i++){ 
	char dFile[120];
	sprintf(dFile,"../production/EA96C47D776FB1CF3DF31CCBAE692B6A_%i.root",i); 
        ch2->AddFile(dFile);                                              
	}*/

    ZDCEPRes_sh_c1 = (TH1F*)f_D->Get("ZDCEPRes_sh_c1");
    ZDCEPRes_sh_c2 = (TH1F*)f_D->Get("ZDCEPRes_sh_c2");
    ZDCEPRes_sh_c3 = (TH1F*)f_D->Get("ZDCEPRes_sh_c3");
    ZDCEPRes_sh_c4 = (TH1F*)f_D->Get("ZDCEPRes_sh_c4");
    ZDCEPRes_sh_c5 = (TH1F*)f_D->Get("ZDCEPRes_sh_c5");
    ZDCEPRes_sh_c6 = (TH1F*)f_D->Get("ZDCEPRes_sh_c6");
    ZDCEPRes_sh_c7 = (TH1F*)f_D->Get("ZDCEPRes_sh_c7");
    ZDCEPRes_sh_c8 = (TH1F*)f_D->Get("ZDCEPRes_sh_c8");
    ZDCEPRes_sh_c0 = (TH1F*)f_D->Get("ZDCEPRes_sh_c0");
    TH1F *Weight = new TH1F("Weight","Weight",9,0,9);
    TH1F *Res = new TH1F("Res","Res",9,0,9);
    Res->SetBinContent(1,sqrt(2*ZDCEPRes_sh_c0->GetMean()));
    Res->SetBinContent(2,sqrt(2*ZDCEPRes_sh_c1->GetMean()));
    Res->SetBinContent(3,sqrt(2*ZDCEPRes_sh_c2->GetMean()));
    Res->SetBinContent(4,sqrt(2*ZDCEPRes_sh_c3->GetMean()));
    Res->SetBinContent(5,sqrt(2*ZDCEPRes_sh_c4->GetMean()));
    Res->SetBinContent(6,sqrt(2*ZDCEPRes_sh_c5->GetMean()));
    Res->SetBinContent(7,sqrt(2*ZDCEPRes_sh_c6->GetMean()));
    Res->SetBinContent(8,sqrt(2*ZDCEPRes_sh_c7->GetMean()));
    Res->SetBinContent(9,sqrt(2*ZDCEPRes_sh_c8->GetMean()));
    TCanvas *c1 = new TCanvas("c1","c1");
    Res->Draw();
    float run_id;
    float centrality;
    float dcaxy;
    float dca;
    float phi;
    float triggercat;
    float bkgcat;
    float gweight;   
    float pt;
    float p;
    float eta;
    float ep1;
    float dca;
    float iso;
    float charge;
    ch2 -> SetBranchAddress( "sig_charge" , &charge );
    ch2 -> SetBranchAddress( "sig_eta" , &eta );
    ch2 -> SetBranchAddress( "sig_pt" , &pt );
    ch2 -> SetBranchAddress( "sig_p" , &p );
    ch2 -> SetBranchAddress( "sig_dca" , &dcaxy );
    ch2 -> SetBranchAddress( "sig_phi" , &phi );
    ch2 -> SetBranchAddress( "sig_triggercat" , &triggercat );
    ch2 -> SetBranchAddress( "sig_isiso" , &iso );
    ch2 -> SetBranchAddress( "event_ep1" , &ep1 );
    ch2 -> SetBranchAddress( "event_gweight" , &gweight );    
    ch2 -> SetBranchAddress( "event_centrality" , &centrality ); 
    int const phiBins = 40;
    int const numPtBins=9;
    int count=0;
    if(1){
	TH1F *EP = new TH1F("EP","EP",200,0,TMath::Pi()*2);
	TH2F *Eta1_p = new TH2F("Eta1_p","Eta1_p",8,0,TMath::Pi(),600,-6,0);
	TH2F *Eta2_p = new TH2F("Eta2_p","Eta2_p",8,0,TMath::Pi(),600,-6,0);
	TH2F *Eta3_p = new TH2F("Eta3_p","Eta3_p",8,0,TMath::Pi(),600,-6,0);
	TH2F *Eta4_p = new TH2F("Eta4_p","Eta4_p",8,0,TMath::Pi(),600,-6,0);
	TH2F *Eta1_m = new TH2F("Eta1_m","Eta1_m",8,0,TMath::Pi(),600,-6,0);
	TH2F *Eta2_m = new TH2F("Eta2_m","Eta2_m",8,0,TMath::Pi(),600,-6,0);
	TH2F *Eta3_m = new TH2F("Eta3_m","Eta3_m",8,0,TMath::Pi(),600,-6,0);
	TH2F *Eta4_m = new TH2F("Eta4_m","Eta4_m",8,0,TMath::Pi(),600,-6,0);
	
	TH2F *he_loose_p = new TH2F("he_loose_p","he_loose_p",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_loose_p->Sumw2();
	TH2F *he_tight_p = new TH2F("he_tight_p","he_tight_p",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_tight_p->Sumw2();
	TH2F *heb_loose_p = new TH2F("heb_loose_p","heb_loose_p",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);heb_loose_p->Sumw2();
        TH2F *heb_tight_p = new TH2F("heb_tight_p","heb_tight_p",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);heb_tight_p->Sumw2();
	TH2F *he_nobias_loose_p = new TH2F("he_nobias_loose_p","he_nobias_loose_p",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_loose_p->Sumw2();
	TH2F *he_nobias_tight_p = new TH2F("he_nobias_tight_p","he_nobias_tight_p",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_tight_p->Sumw2();
	TH2F *he_loose_m = new TH2F("he_loose_m","he_loose_m",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_loose_m->Sumw2();
	TH2F *he_tight_m = new TH2F("he_tight_m","he_tight_m",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_tight_m->Sumw2();
	TH2F *heb_loose_m = new TH2F("heb_loose_m","heb_loose_m",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);heb_loose_m->Sumw2();
        TH2F *heb_tight_m = new TH2F("heb_tight_m","heb_tight_m",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);heb_tight_m->Sumw2();
	TH2F *he_nobias_loose_m = new TH2F("he_nobias_loose_m","he_nobias_loose_m",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_loose_m->Sumw2();
	TH2F *he_nobias_tight_m = new TH2F("he_nobias_tight_m","he_nobias_tight_m",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_tight_m->Sumw2();
	TH2F *he_loose_p_ht = new TH2F("he_loose_p_ht","he_loose_p_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_loose_p_ht->Sumw2();
	TH2F *he_tight_p_ht = new TH2F("he_tight_p_ht","he_tight_p_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_tight_p_ht->Sumw2();
	TH2F *he_nobias_loose_p_ht = new TH2F("he_nobias_loose_p_ht","he_nobias_loose_p_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_loose_p_ht->Sumw2();
	TH2F *he_nobias_tight_p_ht = new TH2F("he_nobias_tight_p_ht","he_nobias_tight_p_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_tight_p_ht->Sumw2();
	TH2F *he_loose_m_ht = new TH2F("he_loose_m_ht","he_loose_m_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_loose_m_ht->Sumw2();
	TH2F *he_tight_m_ht = new TH2F("he_tight_m_ht","he_tight_m_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_tight_m_ht->Sumw2();
	TH2F *he_nobias_loose_m_ht = new TH2F("he_nobias_loose_m_ht","he_nobias_loose_m_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_loose_m_ht->Sumw2();
	TH2F *he_nobias_tight_m_ht = new TH2F("he_nobias_tight_m_ht","he_nobias_tight_m_ht",phiBins*4*4/5,-TMath::Pi()*4,TMath::Pi()*4,100,-1,1);he_nobias_tight_m_ht->Sumw2();
	int loop = 14110193;//ch2->GetEntries();
	double pthigh=2;
	double temp=0;
	for(int i =0;i<loop;i++){
	    ch2->GetEntry(i);  
	    if(i%100000==0)cout << "On event " << i << " out of " << loop << endl;
	    if(!iso)continue;
	    if(TMath::Log10(fabs(dcaxy+0.000000001))>-1)continue;//1.8
	    if(pt<1.2)continue;
	    if(centrality>6)continue;
	    TLorentzVector *par = new TLorentzVector();
	    par->SetPtEtaPhiE(pt,eta,phi,sqrt(p*p+0.00051099907*0.00051099907));
	    TVector2 *newphi = new TVector2();
	    newphi->SetMagPhi(pt,phi);
	    double dPhi = (phi-ep1);
	    //if(dPhi<0)dPhi+= TMath::Pi();
	    while(dPhi<0)dPhi+= TMath::Pi()*2;
	    while(dPhi>=TMath::Pi()*2)dPhi += -TMath::Pi()*2;
	    if(dPhi>=TMath::Pi())dPhi = TMath::Pi()*2-dPhi;
	    EP->Fill(ep1);
	    eta = par->Rapidity();
	
	    double res = Res->GetBinContent(Res->FindBin(centrality));
	    if((triggercat==8 || triggercat==5)){
		if(charge>0){
		    if(eta>-0.8 && eta<-0.4)Eta1_p->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		    if(eta>-0.4 && eta<0)Eta2_p->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		    if(eta>0 && eta<0.4)Eta3_p->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		    if(eta>0.4 && eta<0.8)Eta4_p->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		}
		if(charge<0){
		    if(eta>-0.8 && eta<-0.4)Eta1_m->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		    if(eta>-0.4 && eta<0)Eta2_m->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		    if(eta>0 && eta<0.4)Eta3_m->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		    if(eta>0.4 && eta<0.8)Eta4_m->Fill(dPhi,TMath::Log10(fabs(dcaxy+0.000000001)),1/res);
		}
	    }
	    // Cut of inclusive fits///////
	    //if(TMath::Log10(fabs(dcaxy+0.000000001))>-1.8)continue;//1.8 
	    //=====================////////
	    if(triggercat==5 || triggercat==8){// Min. bias + HT trigger
		Weight->Fill(centrality);
		if(charge>0)he_nobias_loose_p->Fill(dPhi,eta,1/res);
		if(charge<0)he_nobias_loose_m->Fill(dPhi,eta,1/res);
		if(charge>0&&pt>pthigh)he_nobias_tight_p->Fill(dPhi,eta,1/res);
		if(charge<0&&pt>pthigh)he_nobias_tight_m->Fill(dPhi,eta,1/res);
                if(TMath::Log10(fabs(dcaxy+0.000000001))>-2.4 && TMath::Log10(fabs(dcaxy+0.000000001))<-2.1){
                    if(charge>0)he_loose_p->Fill(dPhi,eta,1/res);
                    if(charge<0)he_loose_m->Fill(dPhi,eta,1/res);
//		    count++;
		}
		if(TMath::Log10(fabs(dcaxy+0.000000001))>-2.6 && TMath::Log10(fabs(dcaxy+0.000000001))<-1.8){
		    if(charge>0)if(pt>pthigh)he_tight_p->Fill(dPhi,eta,1/res);
		    if(charge<0)if(pt>pthigh)he_tight_m->Fill(dPhi,eta,1/res);
		    count++;
		}
                if(TMath::Log10(fabs(dcaxy+0.000000001))>-1.7){
                    if(charge>0)heb_loose_p->Fill(dPhi,eta,1/res);
                    if(charge<0)heb_loose_m->Fill(dPhi,eta,1/res);
//                  count++;                                                                                                                                                                   
                }
                if(TMath::Log10(fabs(dcaxy+0.000000001))>-1.7){
                    if(charge>0)if(pt>pthigh)heb_tight_p->Fill(dPhi,eta,1/res);
                    if(charge<0)if(pt>pthigh)heb_tight_m->Fill(dPhi,eta,1/res);
                    count++;
                }

	    }
	    if(triggercat==8){// High tower trigger
                if(TMath::Log10(fabs(dcaxy+0.000000001))>-2.6){
                    if(charge>0)he_loose_p_ht->Fill(dPhi,eta,1/res);
                    if(charge<0)he_loose_m_ht->Fill(dPhi,eta,1/res);
                }
                if(charge>0)he_nobias_loose_p_ht->Fill(dPhi,eta,1/res);
                if(charge<0)he_nobias_loose_m_ht->Fill(dPhi,eta,1/res );
                if(charge>0&&pt>pthigh)he_nobias_tight_p_ht->Fill(dPhi,eta,1/res);
                if(charge<0&&pt>pthigh)he_nobias_tight_m_ht->Fill(dPhi,eta,1/res);
                if(TMath::Log10(fabs(dcaxy+0.000000001))>-2.6){
                    if(charge>0)if(pt>pthigh)he_tight_p_ht->Fill(dPhi,eta,1/res);
                    if(charge<0)if(pt>pthigh)he_tight_m_ht->Fill(dPhi,eta,1/res);
                }
            }
	    par->Delete();    
	    newphi->Delete();
	}
	if(save){
	    TFile f("root/histograms.root","RECREATE");
	    he_nobias_loose_p->Write();
	    he_nobias_loose_m->Write();
	    he_nobias_tight_p->Write();
	    he_nobias_tight_m->Write();
	    he_loose_p->Write();
	    he_loose_m->Write();
	    he_tight_p->Write();
	    he_tight_m->Write();
	    heb_loose_p->Write();
	    heb_loose_m->Write();
	    heb_tight_p->Write();
	    heb_tight_m->Write();
	    he_nobias_loose_p_ht->Write();
	    he_nobias_loose_m_ht->Write();
	    he_nobias_tight_p_ht->Write();
	    he_nobias_tight_m_ht->Write();
	    he_loose_p_ht->Write();
	    he_loose_m_ht->Write();
	    he_tight_p_ht->Write();
	    he_tight_m_ht->Write();
	    Res->Write();
	    Weight->Write();
	    Eta1_p->Write();
	    Eta2_p->Write();
	    Eta3_p->Write();
	    Eta4_p->Write();
	    Eta1_m->Write();
	    Eta2_m->Write();
	    Eta3_m->Write();
	    Eta4_m->Write();	
	    f.Close();
	}
	cout << "Number of selected electrons " << count << endl;
    }
    TCanvas *c11 = new TCanvas("c11","c11");
    norm(EP);
    EP->GetYaxis()->SetTitle("Arb. Units");
    EP->GetXaxis()->SetTitle("Event Plane [rad]");
    EP->Draw();
}
void norm(TH1F *h){
    double norm1 = h->Integral();
    int bins = h->GetNbinsX();
    for(int i=1; i<bins+1;i++){
	double temp = h->GetBinContent(i);
	double err = h->GetBinError(i);
	h->SetBinContent(i,temp/norm1);
	h->SetBinError(i,err/norm1);
    }
}

